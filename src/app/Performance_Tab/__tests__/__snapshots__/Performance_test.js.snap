// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`snapshot tests should mount the app 1`] = `
<Performance
  autoSize={true}
  cols={12}
  compactType="vertical"
  isDraggable={true}
  isResizable={true}
  items={2}
  margin={
    Array [
      10,
      10,
    ]
  }
  networkEvents={Object {}}
  preventCollision={false}
  resizeHandles={
    Array [
      "e",
      "ne",
      "se",
    ]
  }
  rowHeight={30}
  verticalCompact={true}
>
  <WidthProvider
    autoSize={true}
    className="layout"
    cols={12}
    compactType="vertical"
    isDraggable={true}
    isResizable={true}
    items={2}
    layout={
      Array [
        Object {
          "h": 20,
          "i": "1",
          "w": 3,
          "x": 0,
          "y": 0,
        },
        Object {
          "h": 20,
          "i": "2",
          "w": 9,
          "x": 3,
          "y": 0,
        },
      ]
    }
    margin={
      Array [
        10,
        10,
      ]
    }
    measureBeforeMount={false}
    preventCollision={false}
    resizeHandles={
      Array [
        "e",
        "ne",
        "se",
      ]
    }
    rowHeight={30}
    verticalCompact={true}
  >
    <ReactGridLayout
      autoSize={true}
      className="layout"
      cols={12}
      compactType="vertical"
      containerPadding={null}
      draggableCancel=""
      draggableHandle=""
      droppingItem={
        Object {
          "h": 1,
          "i": "__dropping-elem__",
          "w": 1,
        }
      }
      isBounded={false}
      isDraggable={true}
      isDroppable={false}
      isResizable={true}
      items={2}
      layout={
        Array [
          Object {
            "h": 20,
            "i": "1",
            "w": 3,
            "x": 0,
            "y": 0,
          },
          Object {
            "h": 20,
            "i": "2",
            "w": 9,
            "x": 3,
            "y": 0,
          },
        ]
      }
      margin={
        Array [
          10,
          10,
        ]
      }
      maxRows={Infinity}
      onDrag={[Function]}
      onDragStart={[Function]}
      onDragStop={[Function]}
      onDrop={[Function]}
      onLayoutChange={[Function]}
      onResize={[Function]}
      onResizeStart={[Function]}
      onResizeStop={[Function]}
      preventCollision={false}
      resizeHandles={
        Array [
          "e",
          "ne",
          "se",
        ]
      }
      rowHeight={30}
      style={Object {}}
      transformScale={1}
      useCSSTransforms={true}
      verticalCompact={true}
      width={0}
    >
      <div
        className="react-grid-layout layout"
        onDragEnter={[Function]}
        onDragLeave={[Function]}
        onDragOver={[Function]}
        onDrop={[Function]}
        style={
          Object {
            "height": "810px",
          }
        }
      >
        <GridItem
          cancel=""
          className=""
          cols={12}
          containerPadding={
            Array [
              10,
              10,
            ]
          }
          containerWidth={0}
          h={20}
          handle=""
          i="1"
          isBounded={false}
          isDraggable={true}
          isResizable={true}
          key=".$1"
          margin={
            Array [
              10,
              10,
            ]
          }
          maxH={Infinity}
          maxRows={Infinity}
          maxW={Infinity}
          minH={1}
          minW={1}
          onDrag={[Function]}
          onDragStart={[Function]}
          onDragStop={[Function]}
          onResize={[Function]}
          onResizeStart={[Function]}
          onResizeStop={[Function]}
          resizeHandles={
            Array [
              "e",
              "ne",
              "se",
            ]
          }
          rowHeight={30}
          static={false}
          transformScale={1}
          useCSSTransforms={true}
          usePercentages={false}
          w={3}
          x={0}
          y={0}
        >
          <DraggableCore
            allowAnyClick={false}
            cancel=".react-resizable-handle"
            disabled={false}
            enableUserSelectHack={true}
            grid={null}
            handle=""
            offsetParent={null}
            onDrag={[Function]}
            onMouseDown={[Function]}
            onStart={[Function]}
            onStop={[Function]}
            scale={1}
            transform={null}
          >
            <Resizable
              axis="both"
              draggableOpts={
                Object {
                  "disabled": false,
                }
              }
              handleSize={
                Array [
                  20,
                  20,
                ]
              }
              height={790}
              lockAspectRatio={false}
              maxConstraints={
                Array [
                  -20,
                  Infinity,
                ]
              }
              minConstraints={
                Array [
                  -11,
                  30,
                ]
              }
              onMouseDown={[Function]}
              onMouseUp={[Function]}
              onResize={[Function]}
              onResizeStart={[Function]}
              onResizeStop={[Function]}
              onTouchEnd={[Function]}
              resizeHandles={
                Array [
                  "e",
                  "ne",
                  "se",
                ]
              }
              transformScale={1}
              width={-12}
            >
              <div
                className="react-grid-item makeStyles-grid-4 react-draggable cssTransforms react-resizable"
                data-grid={
                  Object {
                    "h": 20,
                    "i": "1",
                    "w": 2,
                    "x": 0,
                    "y": 0,
                  }
                }
                key="1"
                onMouseDown={[Function]}
                onMouseUp={[Function]}
                onTouchEnd={[Function]}
                style={
                  Object {
                    "MozTransform": "translate(10px,10px)",
                    "OTransform": "translate(10px,10px)",
                    "WebkitTransform": "translate(10px,10px)",
                    "height": "790px",
                    "msTransform": "translate(10px,10px)",
                    "position": "absolute",
                    "transform": "translate(10px,10px)",
                    "width": "-12px",
                  }
                }
              >
                <WithStyles(ForwardRef(AppBar))
                  position="static"
                >
                  <ForwardRef(AppBar)
                    classes={
                      Object {
                        "colorDefault": "MuiAppBar-colorDefault",
                        "colorInherit": "MuiAppBar-colorInherit",
                        "colorPrimary": "MuiAppBar-colorPrimary",
                        "colorSecondary": "MuiAppBar-colorSecondary",
                        "colorTransparent": "MuiAppBar-colorTransparent",
                        "positionAbsolute": "MuiAppBar-positionAbsolute",
                        "positionFixed": "MuiAppBar-positionFixed",
                        "positionRelative": "MuiAppBar-positionRelative",
                        "positionStatic": "MuiAppBar-positionStatic",
                        "positionSticky": "MuiAppBar-positionSticky",
                        "root": "MuiAppBar-root",
                      }
                    }
                    position="static"
                  >
                    <WithStyles(ForwardRef(Paper))
                      className="MuiAppBar-root MuiAppBar-positionStatic MuiAppBar-colorPrimary"
                      component="header"
                      elevation={4}
                      square={true}
                    >
                      <ForwardRef(Paper)
                        className="MuiAppBar-root MuiAppBar-positionStatic MuiAppBar-colorPrimary"
                        classes={
                          Object {
                            "elevation0": "MuiPaper-elevation0",
                            "elevation1": "MuiPaper-elevation1",
                            "elevation10": "MuiPaper-elevation10",
                            "elevation11": "MuiPaper-elevation11",
                            "elevation12": "MuiPaper-elevation12",
                            "elevation13": "MuiPaper-elevation13",
                            "elevation14": "MuiPaper-elevation14",
                            "elevation15": "MuiPaper-elevation15",
                            "elevation16": "MuiPaper-elevation16",
                            "elevation17": "MuiPaper-elevation17",
                            "elevation18": "MuiPaper-elevation18",
                            "elevation19": "MuiPaper-elevation19",
                            "elevation2": "MuiPaper-elevation2",
                            "elevation20": "MuiPaper-elevation20",
                            "elevation21": "MuiPaper-elevation21",
                            "elevation22": "MuiPaper-elevation22",
                            "elevation23": "MuiPaper-elevation23",
                            "elevation24": "MuiPaper-elevation24",
                            "elevation3": "MuiPaper-elevation3",
                            "elevation4": "MuiPaper-elevation4",
                            "elevation5": "MuiPaper-elevation5",
                            "elevation6": "MuiPaper-elevation6",
                            "elevation7": "MuiPaper-elevation7",
                            "elevation8": "MuiPaper-elevation8",
                            "elevation9": "MuiPaper-elevation9",
                            "outlined": "MuiPaper-outlined",
                            "root": "MuiPaper-root",
                            "rounded": "MuiPaper-rounded",
                          }
                        }
                        component="header"
                        elevation={4}
                        square={true}
                      >
                        <header
                          className="MuiPaper-root MuiAppBar-root MuiAppBar-positionStatic MuiAppBar-colorPrimary MuiPaper-elevation4"
                        >
                          <WithStyles(ForwardRef(Toolbar))>
                            <ForwardRef(Toolbar)
                              classes={
                                Object {
                                  "dense": "MuiToolbar-dense",
                                  "gutters": "MuiToolbar-gutters",
                                  "regular": "MuiToolbar-regular",
                                  "root": "MuiToolbar-root",
                                }
                              }
                            >
                              <div
                                className="MuiToolbar-root MuiToolbar-regular MuiToolbar-gutters"
                              >
                                <WithStyles(ForwardRef(Typography))
                                  className="makeStyles-titles-3"
                                  color="inherit"
                                  variant="subtitle2"
                                >
                                  <ForwardRef(Typography)
                                    className="makeStyles-titles-3"
                                    classes={
                                      Object {
                                        "alignCenter": "MuiTypography-alignCenter",
                                        "alignJustify": "MuiTypography-alignJustify",
                                        "alignLeft": "MuiTypography-alignLeft",
                                        "alignRight": "MuiTypography-alignRight",
                                        "body1": "MuiTypography-body1",
                                        "body2": "MuiTypography-body2",
                                        "button": "MuiTypography-button",
                                        "caption": "MuiTypography-caption",
                                        "colorError": "MuiTypography-colorError",
                                        "colorInherit": "MuiTypography-colorInherit",
                                        "colorPrimary": "MuiTypography-colorPrimary",
                                        "colorSecondary": "MuiTypography-colorSecondary",
                                        "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                        "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                        "displayBlock": "MuiTypography-displayBlock",
                                        "displayInline": "MuiTypography-displayInline",
                                        "gutterBottom": "MuiTypography-gutterBottom",
                                        "h1": "MuiTypography-h1",
                                        "h2": "MuiTypography-h2",
                                        "h3": "MuiTypography-h3",
                                        "h4": "MuiTypography-h4",
                                        "h5": "MuiTypography-h5",
                                        "h6": "MuiTypography-h6",
                                        "noWrap": "MuiTypography-noWrap",
                                        "overline": "MuiTypography-overline",
                                        "paragraph": "MuiTypography-paragraph",
                                        "root": "MuiTypography-root",
                                        "srOnly": "MuiTypography-srOnly",
                                        "subtitle1": "MuiTypography-subtitle1",
                                        "subtitle2": "MuiTypography-subtitle2",
                                      }
                                    }
                                    color="inherit"
                                    variant="subtitle2"
                                  >
                                    <h6
                                      className="MuiTypography-root makeStyles-titles-3 MuiTypography-subtitle2 MuiTypography-colorInherit"
                                    >
                                      Network Events
                                    </h6>
                                  </ForwardRef(Typography)>
                                </WithStyles(ForwardRef(Typography))>
                              </div>
                            </ForwardRef(Toolbar)>
                          </WithStyles(ForwardRef(Toolbar))>
                        </header>
                      </ForwardRef(Paper)>
                    </WithStyles(ForwardRef(Paper))>
                  </ForwardRef(AppBar)>
                </WithStyles(ForwardRef(AppBar))>
                <WithStyles(ForwardRef(List))
                  aria-label="main mailbox folders"
                  component="nav"
                  dense={true}
                >
                  <ForwardRef(List)
                    aria-label="main mailbox folders"
                    classes={
                      Object {
                        "dense": "MuiList-dense",
                        "padding": "MuiList-padding",
                        "root": "MuiList-root",
                        "subheader": "MuiList-subheader",
                      }
                    }
                    component="nav"
                    dense={true}
                  >
                    <nav
                      aria-label="main mailbox folders"
                      className="MuiList-root MuiList-dense MuiList-padding"
                    >
                      <Loader
                        color="#123abc"
                        css={
                          Object {
                            "map": undefined,
                            "name": "3u6ywd",
                            "next": undefined,
                            "styles": "
  display: block;
  margin: 0 auto;
  border-color: red;
",
                            "toString": [Function],
                          }
                        }
                        loading={true}
                        size={60}
                      >
                        <EmotionCssPropInternal
                          __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                          css={
                            Array [
                              Object {
                                "map": undefined,
                                "name": "ailvj2",
                                "next": undefined,
                                "styles": "
      position: relative;
      width: 60px;
      height: 60px;
    ",
                                "toString": [Function],
                              },
                              Object {
                                "map": undefined,
                                "name": "3u6ywd",
                                "next": undefined,
                                "styles": "
  display: block;
  margin: 0 auto;
  border-color: red;
",
                                "toString": [Function],
                              },
                            ]
                          }
                        >
                          <div
                            className="css-hxib3n"
                          >
                            <EmotionCssPropInternal
                              __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                              css={
                                Object {
                                  "map": undefined,
                                  "name": "riht0h",
                                  "next": Object {
                                    "name": "animation-66508u",
                                    "next": Object {
                                      "name": "animation-7w6l1j",
                                      "next": undefined,
                                      "styles": "@keyframes animation-7w6l1j{
  0%  {transform: scale(0)}
  100% {transform: scale(1.0)}
}",
                                    },
                                    "styles": "@keyframes animation-66508u{
  0%  {opacity: 1}
  100% {opacity: 0}
}",
                                  },
                                  "styles": "
      position: absolute;
      height: 60px;
      width: 60px;
      border: thick solid #123abc;
      border-radius: 50%;
      opacity: 1;
      top: 0;
      left: 0;
      animation-fill-mode: both;
      animation: animation-7w6l1j, animation-66508u;
      animation-duration: 2s;
      animation-iteration-count: infinite;
      animation-timing-function: cubic-bezier(0.165, 0.84, 0.44, 1), cubic-bezier(0.3, 0.61, 0.355, 1);
      animation-delay: -1s;
    ",
                                  "toString": [Function],
                                }
                              }
                            >
                              <div
                                className="css-riht0h"
                              />
                            </EmotionCssPropInternal>
                            <EmotionCssPropInternal
                              __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                              css={
                                Object {
                                  "map": undefined,
                                  "name": "13p1ws9",
                                  "next": Object {
                                    "name": "animation-66508u",
                                    "next": Object {
                                      "name": "animation-7w6l1j",
                                      "next": undefined,
                                      "styles": "@keyframes animation-7w6l1j{
  0%  {transform: scale(0)}
  100% {transform: scale(1.0)}
}",
                                    },
                                    "styles": "@keyframes animation-66508u{
  0%  {opacity: 1}
  100% {opacity: 0}
}",
                                  },
                                  "styles": "
      position: absolute;
      height: 60px;
      width: 60px;
      border: thick solid #123abc;
      border-radius: 50%;
      opacity: 1;
      top: 0;
      left: 0;
      animation-fill-mode: both;
      animation: animation-7w6l1j, animation-66508u;
      animation-duration: 2s;
      animation-iteration-count: infinite;
      animation-timing-function: cubic-bezier(0.165, 0.84, 0.44, 1), cubic-bezier(0.3, 0.61, 0.355, 1);
      animation-delay: 0s;
    ",
                                  "toString": [Function],
                                }
                              }
                            >
                              <div
                                className="css-13p1ws9"
                              />
                            </EmotionCssPropInternal>
                          </div>
                        </EmotionCssPropInternal>
                      </Loader>
                      <WithStyles(ForwardRef(ListItemText))
                        primary="Listening for events"
                        style={
                          Object {
                            "textAlign": "center",
                          }
                        }
                      >
                        <ForwardRef(ListItemText)
                          classes={
                            Object {
                              "dense": "MuiListItemText-dense",
                              "inset": "MuiListItemText-inset",
                              "multiline": "MuiListItemText-multiline",
                              "primary": "MuiListItemText-primary",
                              "root": "MuiListItemText-root",
                              "secondary": "MuiListItemText-secondary",
                            }
                          }
                          primary="Listening for events"
                          style={
                            Object {
                              "textAlign": "center",
                            }
                          }
                        >
                          <div
                            className="MuiListItemText-root MuiListItemText-dense"
                            style={
                              Object {
                                "textAlign": "center",
                              }
                            }
                          >
                            <WithStyles(ForwardRef(Typography))
                              className="MuiListItemText-primary"
                              component="span"
                              display="block"
                              variant="body2"
                            >
                              <ForwardRef(Typography)
                                className="MuiListItemText-primary"
                                classes={
                                  Object {
                                    "alignCenter": "MuiTypography-alignCenter",
                                    "alignJustify": "MuiTypography-alignJustify",
                                    "alignLeft": "MuiTypography-alignLeft",
                                    "alignRight": "MuiTypography-alignRight",
                                    "body1": "MuiTypography-body1",
                                    "body2": "MuiTypography-body2",
                                    "button": "MuiTypography-button",
                                    "caption": "MuiTypography-caption",
                                    "colorError": "MuiTypography-colorError",
                                    "colorInherit": "MuiTypography-colorInherit",
                                    "colorPrimary": "MuiTypography-colorPrimary",
                                    "colorSecondary": "MuiTypography-colorSecondary",
                                    "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                    "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                    "displayBlock": "MuiTypography-displayBlock",
                                    "displayInline": "MuiTypography-displayInline",
                                    "gutterBottom": "MuiTypography-gutterBottom",
                                    "h1": "MuiTypography-h1",
                                    "h2": "MuiTypography-h2",
                                    "h3": "MuiTypography-h3",
                                    "h4": "MuiTypography-h4",
                                    "h5": "MuiTypography-h5",
                                    "h6": "MuiTypography-h6",
                                    "noWrap": "MuiTypography-noWrap",
                                    "overline": "MuiTypography-overline",
                                    "paragraph": "MuiTypography-paragraph",
                                    "root": "MuiTypography-root",
                                    "srOnly": "MuiTypography-srOnly",
                                    "subtitle1": "MuiTypography-subtitle1",
                                    "subtitle2": "MuiTypography-subtitle2",
                                  }
                                }
                                component="span"
                                display="block"
                                variant="body2"
                              >
                                <span
                                  className="MuiTypography-root MuiListItemText-primary MuiTypography-body2 MuiTypography-displayBlock"
                                >
                                  Listening for events
                                </span>
                              </ForwardRef(Typography)>
                            </WithStyles(ForwardRef(Typography))>
                          </div>
                        </ForwardRef(ListItemText)>
                      </WithStyles(ForwardRef(ListItemText))>
                    </nav>
                  </ForwardRef(List)>
                </WithStyles(ForwardRef(List))>
                <DraggableCore
                  allowAnyClick={false}
                  cancel={null}
                  disabled={false}
                  enableUserSelectHack={true}
                  grid={null}
                  handle={null}
                  key="resizableHandle-e"
                  offsetParent={null}
                  onDrag={[Function]}
                  onMouseDown={[Function]}
                  onStart={[Function]}
                  onStop={[Function]}
                  scale={1}
                  transform={null}
                >
                  <span
                    className="react-resizable-handle react-resizable-handle-e"
                    onMouseDown={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                  />
                </DraggableCore>
                <DraggableCore
                  allowAnyClick={false}
                  cancel={null}
                  disabled={false}
                  enableUserSelectHack={true}
                  grid={null}
                  handle={null}
                  key="resizableHandle-ne"
                  offsetParent={null}
                  onDrag={[Function]}
                  onMouseDown={[Function]}
                  onStart={[Function]}
                  onStop={[Function]}
                  scale={1}
                  transform={null}
                >
                  <span
                    className="react-resizable-handle react-resizable-handle-ne"
                    onMouseDown={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                  />
                </DraggableCore>
                <DraggableCore
                  allowAnyClick={false}
                  cancel={null}
                  disabled={false}
                  enableUserSelectHack={true}
                  grid={null}
                  handle={null}
                  key="resizableHandle-se"
                  offsetParent={null}
                  onDrag={[Function]}
                  onMouseDown={[Function]}
                  onStart={[Function]}
                  onStop={[Function]}
                  scale={1}
                  transform={null}
                >
                  <span
                    className="react-resizable-handle react-resizable-handle-se"
                    onMouseDown={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                  />
                </DraggableCore>
              </div>
            </Resizable>
          </DraggableCore>
        </GridItem>
        <GridItem
          cancel=""
          className=""
          cols={12}
          containerPadding={
            Array [
              10,
              10,
            ]
          }
          containerWidth={0}
          h={20}
          handle=""
          i="2"
          isBounded={false}
          isDraggable={true}
          isResizable={true}
          key=".$2"
          margin={
            Array [
              10,
              10,
            ]
          }
          maxH={Infinity}
          maxRows={Infinity}
          maxW={Infinity}
          minH={1}
          minW={1}
          onDrag={[Function]}
          onDragStart={[Function]}
          onDragStop={[Function]}
          onResize={[Function]}
          onResizeStart={[Function]}
          onResizeStop={[Function]}
          resizeHandles={
            Array [
              "e",
              "ne",
              "se",
            ]
          }
          rowHeight={30}
          static={false}
          transformScale={1}
          useCSSTransforms={true}
          usePercentages={false}
          w={9}
          x={3}
          y={0}
        >
          <DraggableCore
            allowAnyClick={false}
            cancel=".react-resizable-handle"
            disabled={false}
            enableUserSelectHack={true}
            grid={null}
            handle=""
            offsetParent={null}
            onDrag={[Function]}
            onMouseDown={[Function]}
            onStart={[Function]}
            onStop={[Function]}
            scale={1}
            transform={null}
          >
            <Resizable
              axis="both"
              draggableOpts={
                Object {
                  "disabled": false,
                }
              }
              handleSize={
                Array [
                  20,
                  20,
                ]
              }
              height={790}
              lockAspectRatio={false}
              maxConstraints={
                Array [
                  -17,
                  Infinity,
                ]
              }
              minConstraints={
                Array [
                  -11,
                  30,
                ]
              }
              onMouseDown={[Function]}
              onMouseUp={[Function]}
              onResize={[Function]}
              onResizeStart={[Function]}
              onResizeStop={[Function]}
              onTouchEnd={[Function]}
              resizeHandles={
                Array [
                  "e",
                  "ne",
                  "se",
                ]
              }
              transformScale={1}
              width={-17}
            >
              <div
                className="react-grid-item makeStyles-grid-4 react-draggable cssTransforms react-resizable"
                data-grid={
                  Object {
                    "h": 20,
                    "i": "2",
                    "w": 10,
                    "x": 2,
                    "y": 0,
                  }
                }
                key="2"
                onMouseDown={[Function]}
                onMouseUp={[Function]}
                onTouchEnd={[Function]}
                style={
                  Object {
                    "MozTransform": "translate(7px,10px)",
                    "OTransform": "translate(7px,10px)",
                    "WebkitTransform": "translate(7px,10px)",
                    "height": "790px",
                    "msTransform": "translate(7px,10px)",
                    "position": "absolute",
                    "transform": "translate(7px,10px)",
                    "width": "-17px",
                  }
                }
              >
                <WithStyles(ForwardRef(AppBar))
                  position="static"
                >
                  <ForwardRef(AppBar)
                    classes={
                      Object {
                        "colorDefault": "MuiAppBar-colorDefault",
                        "colorInherit": "MuiAppBar-colorInherit",
                        "colorPrimary": "MuiAppBar-colorPrimary",
                        "colorSecondary": "MuiAppBar-colorSecondary",
                        "colorTransparent": "MuiAppBar-colorTransparent",
                        "positionAbsolute": "MuiAppBar-positionAbsolute",
                        "positionFixed": "MuiAppBar-positionFixed",
                        "positionRelative": "MuiAppBar-positionRelative",
                        "positionStatic": "MuiAppBar-positionStatic",
                        "positionSticky": "MuiAppBar-positionSticky",
                        "root": "MuiAppBar-root",
                      }
                    }
                    position="static"
                  >
                    <WithStyles(ForwardRef(Paper))
                      className="MuiAppBar-root MuiAppBar-positionStatic MuiAppBar-colorPrimary"
                      component="header"
                      elevation={4}
                      square={true}
                    >
                      <ForwardRef(Paper)
                        className="MuiAppBar-root MuiAppBar-positionStatic MuiAppBar-colorPrimary"
                        classes={
                          Object {
                            "elevation0": "MuiPaper-elevation0",
                            "elevation1": "MuiPaper-elevation1",
                            "elevation10": "MuiPaper-elevation10",
                            "elevation11": "MuiPaper-elevation11",
                            "elevation12": "MuiPaper-elevation12",
                            "elevation13": "MuiPaper-elevation13",
                            "elevation14": "MuiPaper-elevation14",
                            "elevation15": "MuiPaper-elevation15",
                            "elevation16": "MuiPaper-elevation16",
                            "elevation17": "MuiPaper-elevation17",
                            "elevation18": "MuiPaper-elevation18",
                            "elevation19": "MuiPaper-elevation19",
                            "elevation2": "MuiPaper-elevation2",
                            "elevation20": "MuiPaper-elevation20",
                            "elevation21": "MuiPaper-elevation21",
                            "elevation22": "MuiPaper-elevation22",
                            "elevation23": "MuiPaper-elevation23",
                            "elevation24": "MuiPaper-elevation24",
                            "elevation3": "MuiPaper-elevation3",
                            "elevation4": "MuiPaper-elevation4",
                            "elevation5": "MuiPaper-elevation5",
                            "elevation6": "MuiPaper-elevation6",
                            "elevation7": "MuiPaper-elevation7",
                            "elevation8": "MuiPaper-elevation8",
                            "elevation9": "MuiPaper-elevation9",
                            "outlined": "MuiPaper-outlined",
                            "root": "MuiPaper-root",
                            "rounded": "MuiPaper-rounded",
                          }
                        }
                        component="header"
                        elevation={4}
                        square={true}
                      >
                        <header
                          className="MuiPaper-root MuiAppBar-root MuiAppBar-positionStatic MuiAppBar-colorPrimary MuiPaper-elevation4"
                        >
                          <WithStyles(ForwardRef(Toolbar))>
                            <ForwardRef(Toolbar)
                              classes={
                                Object {
                                  "dense": "MuiToolbar-dense",
                                  "gutters": "MuiToolbar-gutters",
                                  "regular": "MuiToolbar-regular",
                                  "root": "MuiToolbar-root",
                                }
                              }
                            >
                              <div
                                className="MuiToolbar-root MuiToolbar-regular MuiToolbar-gutters"
                              >
                                <WithStyles(ForwardRef(Typography))
                                  className="makeStyles-titles-3"
                                  color="inherit"
                                  variant="subtitle2"
                                >
                                  <ForwardRef(Typography)
                                    className="makeStyles-titles-3"
                                    classes={
                                      Object {
                                        "alignCenter": "MuiTypography-alignCenter",
                                        "alignJustify": "MuiTypography-alignJustify",
                                        "alignLeft": "MuiTypography-alignLeft",
                                        "alignRight": "MuiTypography-alignRight",
                                        "body1": "MuiTypography-body1",
                                        "body2": "MuiTypography-body2",
                                        "button": "MuiTypography-button",
                                        "caption": "MuiTypography-caption",
                                        "colorError": "MuiTypography-colorError",
                                        "colorInherit": "MuiTypography-colorInherit",
                                        "colorPrimary": "MuiTypography-colorPrimary",
                                        "colorSecondary": "MuiTypography-colorSecondary",
                                        "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                        "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                        "displayBlock": "MuiTypography-displayBlock",
                                        "displayInline": "MuiTypography-displayInline",
                                        "gutterBottom": "MuiTypography-gutterBottom",
                                        "h1": "MuiTypography-h1",
                                        "h2": "MuiTypography-h2",
                                        "h3": "MuiTypography-h3",
                                        "h4": "MuiTypography-h4",
                                        "h5": "MuiTypography-h5",
                                        "h6": "MuiTypography-h6",
                                        "noWrap": "MuiTypography-noWrap",
                                        "overline": "MuiTypography-overline",
                                        "paragraph": "MuiTypography-paragraph",
                                        "root": "MuiTypography-root",
                                        "srOnly": "MuiTypography-srOnly",
                                        "subtitle1": "MuiTypography-subtitle1",
                                        "subtitle2": "MuiTypography-subtitle2",
                                      }
                                    }
                                    color="inherit"
                                    variant="subtitle2"
                                  >
                                    <h6
                                      className="MuiTypography-root makeStyles-titles-3 MuiTypography-subtitle2 MuiTypography-colorInherit"
                                    >
                                      Resolver Times
                                    </h6>
                                  </ForwardRef(Typography)>
                                </WithStyles(ForwardRef(Typography))>
                              </div>
                            </ForwardRef(Toolbar)>
                          </WithStyles(ForwardRef(Toolbar))>
                        </header>
                      </ForwardRef(Paper)>
                    </WithStyles(ForwardRef(Paper))>
                  </ForwardRef(AppBar)>
                </WithStyles(ForwardRef(AppBar))>
                <TracingDetails
                  eventSelected={false}
                  tracing={
                    Object {
                      "duration": "",
                      "resolvers": Object {},
                      "traceInfo": "",
                    }
                  }
                >
                  <WithStyles(ForwardRef(List))
                    aria-label="main mailbox folders"
                    component="nav"
                    dense={true}
                  >
                    <ForwardRef(List)
                      aria-label="main mailbox folders"
                      classes={
                        Object {
                          "dense": "MuiList-dense",
                          "padding": "MuiList-padding",
                          "root": "MuiList-root",
                          "subheader": "MuiList-subheader",
                        }
                      }
                      component="nav"
                      dense={true}
                    >
                      <nav
                        aria-label="main mailbox folders"
                        className="MuiList-root MuiList-dense MuiList-padding"
                      >
                        <WithStyles(ForwardRef(Card))
                          className="makeStyles-cards-8 makeStyles-cards-11"
                        >
                          <ForwardRef(Card)
                            className="makeStyles-cards-8 makeStyles-cards-11"
                            classes={
                              Object {
                                "root": "MuiCard-root",
                              }
                            }
                          >
                            <WithStyles(ForwardRef(Paper))
                              className="MuiCard-root makeStyles-cards-8 makeStyles-cards-11"
                              elevation={1}
                            >
                              <ForwardRef(Paper)
                                className="MuiCard-root makeStyles-cards-8 makeStyles-cards-11"
                                classes={
                                  Object {
                                    "elevation0": "MuiPaper-elevation0",
                                    "elevation1": "MuiPaper-elevation1",
                                    "elevation10": "MuiPaper-elevation10",
                                    "elevation11": "MuiPaper-elevation11",
                                    "elevation12": "MuiPaper-elevation12",
                                    "elevation13": "MuiPaper-elevation13",
                                    "elevation14": "MuiPaper-elevation14",
                                    "elevation15": "MuiPaper-elevation15",
                                    "elevation16": "MuiPaper-elevation16",
                                    "elevation17": "MuiPaper-elevation17",
                                    "elevation18": "MuiPaper-elevation18",
                                    "elevation19": "MuiPaper-elevation19",
                                    "elevation2": "MuiPaper-elevation2",
                                    "elevation20": "MuiPaper-elevation20",
                                    "elevation21": "MuiPaper-elevation21",
                                    "elevation22": "MuiPaper-elevation22",
                                    "elevation23": "MuiPaper-elevation23",
                                    "elevation24": "MuiPaper-elevation24",
                                    "elevation3": "MuiPaper-elevation3",
                                    "elevation4": "MuiPaper-elevation4",
                                    "elevation5": "MuiPaper-elevation5",
                                    "elevation6": "MuiPaper-elevation6",
                                    "elevation7": "MuiPaper-elevation7",
                                    "elevation8": "MuiPaper-elevation8",
                                    "elevation9": "MuiPaper-elevation9",
                                    "outlined": "MuiPaper-outlined",
                                    "root": "MuiPaper-root",
                                    "rounded": "MuiPaper-rounded",
                                  }
                                }
                                elevation={1}
                              >
                                <div
                                  className="MuiPaper-root MuiCard-root makeStyles-cards-8 makeStyles-cards-11 MuiPaper-elevation1 MuiPaper-rounded"
                                >
                                  <WithStyles(ForwardRef(CardContent))>
                                    <ForwardRef(CardContent)
                                      classes={
                                        Object {
                                          "root": "MuiCardContent-root",
                                        }
                                      }
                                    >
                                      <div
                                        className="MuiCardContent-root"
                                      >
                                        <ArrowChip>
                                          <div
                                            className="makeStyles-chipDiv-12"
                                          >
                                            <WithStyles(ForwardRef(Chip))
                                              avatar={
                                                <WithStyles(ForwardRef(Avatar))>
                                                  <Memo(ArrowBackIcon) />
                                                </WithStyles(ForwardRef(Avatar))>
                                              }
                                              className="makeStyles-chip-13 makeStyles-chip-14"
                                              label="Select a Network Event to see resolver times"
                                              variant="outlined"
                                            >
                                              <ForwardRef(Chip)
                                                avatar={
                                                  <WithStyles(ForwardRef(Avatar))>
                                                    <Memo(ArrowBackIcon) />
                                                  </WithStyles(ForwardRef(Avatar))>
                                                }
                                                className="makeStyles-chip-13 makeStyles-chip-14"
                                                classes={
                                                  Object {
                                                    "avatar": "MuiChip-avatar",
                                                    "avatarColorPrimary": "MuiChip-avatarColorPrimary",
                                                    "avatarColorSecondary": "MuiChip-avatarColorSecondary",
                                                    "avatarSmall": "MuiChip-avatarSmall",
                                                    "clickable": "MuiChip-clickable",
                                                    "clickableColorPrimary": "MuiChip-clickableColorPrimary",
                                                    "clickableColorSecondary": "MuiChip-clickableColorSecondary",
                                                    "colorPrimary": "MuiChip-colorPrimary",
                                                    "colorSecondary": "MuiChip-colorSecondary",
                                                    "deletable": "MuiChip-deletable",
                                                    "deletableColorPrimary": "MuiChip-deletableColorPrimary",
                                                    "deletableColorSecondary": "MuiChip-deletableColorSecondary",
                                                    "deleteIcon": "MuiChip-deleteIcon",
                                                    "deleteIconColorPrimary": "MuiChip-deleteIconColorPrimary",
                                                    "deleteIconColorSecondary": "MuiChip-deleteIconColorSecondary",
                                                    "deleteIconOutlinedColorPrimary": "MuiChip-deleteIconOutlinedColorPrimary",
                                                    "deleteIconOutlinedColorSecondary": "MuiChip-deleteIconOutlinedColorSecondary",
                                                    "deleteIconSmall": "MuiChip-deleteIconSmall",
                                                    "disabled": "Mui-disabled",
                                                    "icon": "MuiChip-icon",
                                                    "iconColorPrimary": "MuiChip-iconColorPrimary",
                                                    "iconColorSecondary": "MuiChip-iconColorSecondary",
                                                    "iconSmall": "MuiChip-iconSmall",
                                                    "label": "MuiChip-label",
                                                    "labelSmall": "MuiChip-labelSmall",
                                                    "outlined": "MuiChip-outlined",
                                                    "outlinedPrimary": "MuiChip-outlinedPrimary",
                                                    "outlinedSecondary": "MuiChip-outlinedSecondary",
                                                    "root": "MuiChip-root",
                                                    "sizeSmall": "MuiChip-sizeSmall",
                                                  }
                                                }
                                                label="Select a Network Event to see resolver times"
                                                variant="outlined"
                                              >
                                                <div
                                                  className="MuiChip-root makeStyles-chip-13 makeStyles-chip-14 MuiChip-outlined"
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                >
                                                  <WithStyles(ForwardRef(Avatar))
                                                    className="MuiChip-avatar"
                                                  >
                                                    <ForwardRef(Avatar)
                                                      className="MuiChip-avatar"
                                                      classes={
                                                        Object {
                                                          "circle": "MuiAvatar-circle",
                                                          "colorDefault": "MuiAvatar-colorDefault",
                                                          "fallback": "MuiAvatar-fallback",
                                                          "img": "MuiAvatar-img",
                                                          "root": "MuiAvatar-root",
                                                          "rounded": "MuiAvatar-rounded",
                                                          "square": "MuiAvatar-square",
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="MuiAvatar-root MuiAvatar-circle MuiChip-avatar MuiAvatar-colorDefault"
                                                      >
                                                        <ForwardRef>
                                                          <WithStyles(ForwardRef(SvgIcon))>
                                                            <ForwardRef(SvgIcon)
                                                              classes={
                                                                Object {
                                                                  "colorAction": "MuiSvgIcon-colorAction",
                                                                  "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                                  "colorError": "MuiSvgIcon-colorError",
                                                                  "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                                  "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                                  "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                                  "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                                  "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                                  "root": "MuiSvgIcon-root",
                                                                }
                                                              }
                                                            >
                                                              <svg
                                                                aria-hidden={true}
                                                                className="MuiSvgIcon-root"
                                                                focusable="false"
                                                                viewBox="0 0 24 24"
                                                              >
                                                                <path
                                                                  d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"
                                                                />
                                                              </svg>
                                                            </ForwardRef(SvgIcon)>
                                                          </WithStyles(ForwardRef(SvgIcon))>
                                                        </ForwardRef>
                                                      </div>
                                                    </ForwardRef(Avatar)>
                                                  </WithStyles(ForwardRef(Avatar))>
                                                  <span
                                                    className="MuiChip-label"
                                                  >
                                                    Select a Network Event to see resolver times
                                                  </span>
                                                </div>
                                              </ForwardRef(Chip)>
                                            </WithStyles(ForwardRef(Chip))>
                                          </div>
                                        </ArrowChip>
                                      </div>
                                    </ForwardRef(CardContent)>
                                  </WithStyles(ForwardRef(CardContent))>
                                </div>
                              </ForwardRef(Paper)>
                            </WithStyles(ForwardRef(Paper))>
                          </ForwardRef(Card)>
                        </WithStyles(ForwardRef(Card))>
                        <WithStyles(ForwardRef(AppBar))
                          position="static"
                        >
                          <ForwardRef(AppBar)
                            classes={
                              Object {
                                "colorDefault": "MuiAppBar-colorDefault",
                                "colorInherit": "MuiAppBar-colorInherit",
                                "colorPrimary": "MuiAppBar-colorPrimary",
                                "colorSecondary": "MuiAppBar-colorSecondary",
                                "colorTransparent": "MuiAppBar-colorTransparent",
                                "positionAbsolute": "MuiAppBar-positionAbsolute",
                                "positionFixed": "MuiAppBar-positionFixed",
                                "positionRelative": "MuiAppBar-positionRelative",
                                "positionStatic": "MuiAppBar-positionStatic",
                                "positionSticky": "MuiAppBar-positionSticky",
                                "root": "MuiAppBar-root",
                              }
                            }
                            position="static"
                          >
                            <WithStyles(ForwardRef(Paper))
                              className="MuiAppBar-root MuiAppBar-positionStatic MuiAppBar-colorPrimary"
                              component="header"
                              elevation={4}
                              square={true}
                            >
                              <ForwardRef(Paper)
                                className="MuiAppBar-root MuiAppBar-positionStatic MuiAppBar-colorPrimary"
                                classes={
                                  Object {
                                    "elevation0": "MuiPaper-elevation0",
                                    "elevation1": "MuiPaper-elevation1",
                                    "elevation10": "MuiPaper-elevation10",
                                    "elevation11": "MuiPaper-elevation11",
                                    "elevation12": "MuiPaper-elevation12",
                                    "elevation13": "MuiPaper-elevation13",
                                    "elevation14": "MuiPaper-elevation14",
                                    "elevation15": "MuiPaper-elevation15",
                                    "elevation16": "MuiPaper-elevation16",
                                    "elevation17": "MuiPaper-elevation17",
                                    "elevation18": "MuiPaper-elevation18",
                                    "elevation19": "MuiPaper-elevation19",
                                    "elevation2": "MuiPaper-elevation2",
                                    "elevation20": "MuiPaper-elevation20",
                                    "elevation21": "MuiPaper-elevation21",
                                    "elevation22": "MuiPaper-elevation22",
                                    "elevation23": "MuiPaper-elevation23",
                                    "elevation24": "MuiPaper-elevation24",
                                    "elevation3": "MuiPaper-elevation3",
                                    "elevation4": "MuiPaper-elevation4",
                                    "elevation5": "MuiPaper-elevation5",
                                    "elevation6": "MuiPaper-elevation6",
                                    "elevation7": "MuiPaper-elevation7",
                                    "elevation8": "MuiPaper-elevation8",
                                    "elevation9": "MuiPaper-elevation9",
                                    "outlined": "MuiPaper-outlined",
                                    "root": "MuiPaper-root",
                                    "rounded": "MuiPaper-rounded",
                                  }
                                }
                                component="header"
                                elevation={4}
                                square={true}
                              >
                                <header
                                  className="MuiPaper-root MuiAppBar-root MuiAppBar-positionStatic MuiAppBar-colorPrimary MuiPaper-elevation4"
                                >
                                  <WithStyles(ForwardRef(Toolbar))>
                                    <ForwardRef(Toolbar)
                                      classes={
                                        Object {
                                          "dense": "MuiToolbar-dense",
                                          "gutters": "MuiToolbar-gutters",
                                          "regular": "MuiToolbar-regular",
                                          "root": "MuiToolbar-root",
                                        }
                                      }
                                    >
                                      <div
                                        className="MuiToolbar-root MuiToolbar-regular MuiToolbar-gutters"
                                      >
                                        <WithStyles(ForwardRef(Typography))
                                          className="makeStyles-titles-7"
                                          color="inherit"
                                          variant="subtitle2"
                                        >
                                          <ForwardRef(Typography)
                                            className="makeStyles-titles-7"
                                            classes={
                                              Object {
                                                "alignCenter": "MuiTypography-alignCenter",
                                                "alignJustify": "MuiTypography-alignJustify",
                                                "alignLeft": "MuiTypography-alignLeft",
                                                "alignRight": "MuiTypography-alignRight",
                                                "body1": "MuiTypography-body1",
                                                "body2": "MuiTypography-body2",
                                                "button": "MuiTypography-button",
                                                "caption": "MuiTypography-caption",
                                                "colorError": "MuiTypography-colorError",
                                                "colorInherit": "MuiTypography-colorInherit",
                                                "colorPrimary": "MuiTypography-colorPrimary",
                                                "colorSecondary": "MuiTypography-colorSecondary",
                                                "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                                "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                                "displayBlock": "MuiTypography-displayBlock",
                                                "displayInline": "MuiTypography-displayInline",
                                                "gutterBottom": "MuiTypography-gutterBottom",
                                                "h1": "MuiTypography-h1",
                                                "h2": "MuiTypography-h2",
                                                "h3": "MuiTypography-h3",
                                                "h4": "MuiTypography-h4",
                                                "h5": "MuiTypography-h5",
                                                "h6": "MuiTypography-h6",
                                                "noWrap": "MuiTypography-noWrap",
                                                "overline": "MuiTypography-overline",
                                                "paragraph": "MuiTypography-paragraph",
                                                "root": "MuiTypography-root",
                                                "srOnly": "MuiTypography-srOnly",
                                                "subtitle1": "MuiTypography-subtitle1",
                                                "subtitle2": "MuiTypography-subtitle2",
                                              }
                                            }
                                            color="inherit"
                                            variant="subtitle2"
                                          >
                                            <h6
                                              className="MuiTypography-root makeStyles-titles-7 MuiTypography-subtitle2 MuiTypography-colorInherit"
                                            >
                                              Individual Resolver Times
                                            </h6>
                                          </ForwardRef(Typography)>
                                        </WithStyles(ForwardRef(Typography))>
                                      </div>
                                    </ForwardRef(Toolbar)>
                                  </WithStyles(ForwardRef(Toolbar))>
                                </header>
                              </ForwardRef(Paper)>
                            </WithStyles(ForwardRef(Paper))>
                          </ForwardRef(AppBar)>
                        </WithStyles(ForwardRef(AppBar))>
                        <WithStyles(ForwardRef(Divider))>
                          <ForwardRef(Divider)
                            classes={
                              Object {
                                "absolute": "MuiDivider-absolute",
                                "flexItem": "MuiDivider-flexItem",
                                "inset": "MuiDivider-inset",
                                "light": "MuiDivider-light",
                                "middle": "MuiDivider-middle",
                                "root": "MuiDivider-root",
                                "vertical": "MuiDivider-vertical",
                              }
                            }
                          >
                            <hr
                              className="MuiDivider-root"
                            />
                          </ForwardRef(Divider)>
                        </WithStyles(ForwardRef(Divider))>
                      </nav>
                    </ForwardRef(List)>
                  </WithStyles(ForwardRef(List))>
                </TracingDetails>
                <DraggableCore
                  allowAnyClick={false}
                  cancel={null}
                  disabled={false}
                  enableUserSelectHack={true}
                  grid={null}
                  handle={null}
                  key="resizableHandle-e"
                  offsetParent={null}
                  onDrag={[Function]}
                  onMouseDown={[Function]}
                  onStart={[Function]}
                  onStop={[Function]}
                  scale={1}
                  transform={null}
                >
                  <span
                    className="react-resizable-handle react-resizable-handle-e"
                    onMouseDown={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                  />
                </DraggableCore>
                <DraggableCore
                  allowAnyClick={false}
                  cancel={null}
                  disabled={false}
                  enableUserSelectHack={true}
                  grid={null}
                  handle={null}
                  key="resizableHandle-ne"
                  offsetParent={null}
                  onDrag={[Function]}
                  onMouseDown={[Function]}
                  onStart={[Function]}
                  onStop={[Function]}
                  scale={1}
                  transform={null}
                >
                  <span
                    className="react-resizable-handle react-resizable-handle-ne"
                    onMouseDown={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                  />
                </DraggableCore>
                <DraggableCore
                  allowAnyClick={false}
                  cancel={null}
                  disabled={false}
                  enableUserSelectHack={true}
                  grid={null}
                  handle={null}
                  key="resizableHandle-se"
                  offsetParent={null}
                  onDrag={[Function]}
                  onMouseDown={[Function]}
                  onStart={[Function]}
                  onStop={[Function]}
                  scale={1}
                  transform={null}
                >
                  <span
                    className="react-resizable-handle react-resizable-handle-se"
                    onMouseDown={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                  />
                </DraggableCore>
              </div>
            </Resizable>
          </DraggableCore>
        </GridItem>
      </div>
    </ReactGridLayout>
  </WidthProvider>
</Performance>
`;
